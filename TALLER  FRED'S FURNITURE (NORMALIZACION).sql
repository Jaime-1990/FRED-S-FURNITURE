SET
	SEARCH_PATH = 'cc_user';

--1
SELECT
	*
FROM
	STORE
LIMIT
	10;

/*En la tabla de fred aparece información de órdenes de compra, cliente e items.
Estas tablas pueden ser separadas.ABORT
De las órdenes de compra se tiene id y la fecha.
De los clientes se tiene su id, número de teléfono y email.
De los items se tienen varias columnas que hacen referencia a ids, nombres y precios de los productos.*/
--2
SELECT
	COUNT(DISTINCT (ORDER_ID))
FROM
	STORE;

SELECT
	COUNT(DISTINCT (CUSTOMER_ID))
FROM
	STORE;

--3
SELECT
	CUSTOMER_ID,
	CUSTOMER_EMAIL,
	CUSTOMER_PHONE
FROM
	STORE
WHERE
	CUSTOMER_ID = 1;

--4
SELECT
	ITEM_1_ID,
	ITEM_1_NAME,
	ITEM_1_PRICE
FROM
	STORE
WHERE
	ITEM_1_ID = 4;

/*Crear una versión normalizada de la base de datos*/
--5
CREATE TABLE CUSTOMERS AS
SELECT DISTINCT
	CUSTOMER_ID,
	CUSTOMER_EMAIL,
	CUSTOMER_PHONE
FROM
	STORE;

/*designar la columna customer_id como clave */
--6
ALTER TABLE CUSTOMERS
ADD PRIMARY KEY (CUSTOMER_ID);

--7
CREATE TABLE ITEMS AS
SELECT DISTINCT
	ITEM_1_ID AS ITEM_ID,
	ITEM_1_NAME AS ITEM_NAME,
	ITEM_1_PRICE AS ITEM_PRICE
FROM
	STORE
WHERE
	ITEM_1_ID IS NOT NULL
UNION
SELECT DISTINCT
	ITEM_2_ID AS ITEM_ID,
	ITEM_2_NAME AS ITEM_NAME,
	ITEM_2_PRICE AS ITEM_PRICE
FROM
	STORE
WHERE
	ITEM_2_ID IS NOT NULL
UNION
SELECT DISTINCT
	ITEM_3_ID AS ITEM_ID,
	ITEM_3_NAME AS ITEM_NAME,
	ITEM_3_PRICE AS ITEM_PRICE
FROM
	STORE
WHERE
	ITEM_3_ID IS NOT NULL
	--8
ALTER TABLE ITEMS
ADD PRIMARY KEY (ITEM_ID);

--9
CREATE TABLE ORDER_ITEMS AS
SELECT
	ORDER_ID,
	ITEM_1_ID AS ITEM_ID
FROM
	STORE
WHERE
	ITEM_1_ID IS NOT NULL
UNION ALL
SELECT
	ORDER_ID,
	ITEM_2_ID
FROM
	STORE
WHERE
	ITEM_2_ID IS NOT NULL
UNION ALL
SELECT
	ORDER_ID,
	ITEM_3_ID
FROM
	STORE
WHERE
	ITEM_3_ID IS NOT NULL;

--10
CREATE TABLE ORDERS AS
SELECT DISTINCT
	ORDER_ID,
	ORDER_DATE,
	CUSTOMER_ID
FROM
	STORE;

--11
ALTER TABLE ORDERS
ADD PRIMARY KEY (ORDER_ID);

--12
ALTER TABLE ORDERS
ADD FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS (CUSTOMER_ID);

ALTER TABLE ORDER_ITEMS
ADD FOREIGN KEY (ITEM_ID) REFERENCES ITEMS (ITEM_ID);

-- 13
ALTER TABLE ORDER_ITEMS
ADD CONSTRAINT FK_ORDER FOREIGN KEY (ORDER_ID) REFERENCES ORDERS (ORDER_ID);

-- 14
SELECT
	CUSTOMER_EMAIL
FROM
	STORE
WHERE
	ORDER_DATE > '2019-07-25';

-- 15
SELECT
	CUSTOMERS.CUSTOMER_EMAIL
FROM
	ORDERS
	JOIN CUSTOMERS ON ORDERS.CUSTOMER_ID = CUSTOMERS.CUSTOMER_ID
WHERE
	ORDERS.ORDER_DATE > '2019-07-25';

-- 16
WITH
	ALL_ITEMS AS (
		SELECT
			ITEM_1_ID AS ITEM_ID
		FROM
			STORE
		WHERE
			ITEM_1_ID IS NOT NULL
		UNION ALL
		SELECT
			ITEM_2_ID
		FROM
			STORE
		WHERE
			ITEM_2_ID IS NOT NULL
		UNION ALL
		SELECT
			ITEM_3_ID
		FROM
			STORE
		WHERE
			ITEM_3_ID IS NOT NULL
	)
SELECT
	ITEM_ID,
	COUNT(*) AS ORDER_COUNT
FROM
	ALL_ITEMS
GROUP BY
	ITEM_ID
ORDER BY
	ITEM_ID;

-- 17
SELECT
	ITEM_ID,
	COUNT(DISTINCT ORDER_ID) AS NUM_ORDERS
FROM
	ORDER_ITEMS
GROUP BY
	ITEM_ID
ORDER BY
	NUM_ORDERS DESC;

-- 18.1 ¿Cuántos clientes hicieron más de un pedido? ¿Cuáles son sus correos electrónicos?
SELECT
	C.CUSTOMER_EMAIL,
	COUNT(O.ORDER_ID) AS TOTAL_ORDERS
FROM
	CUSTOMERS C
	JOIN ORDERS O ON C.CUSTOMER_ID = O.CUSTOMER_ID
GROUP BY
	C.CUSTOMER_EMAIL
HAVING
	COUNT(O.ORDER_ID) > 1;

-- 18.2 Entre los pedidos que se hicieron después del 15 de julio de 2019, ¿cuántos incluían una "lámpara"?
SELECT
	COUNT(DISTINCT O.ORDER_ID) AS LAMP_ORDERS
FROM
	ORDERS O
	JOIN ORDER_ITEMS OI ON O.ORDER_ID = OI.ORDER_ID
	JOIN ITEMS I ON OI.ITEM_ID = I.ITEM_ID
WHERE
	O.ORDER_DATE > '2019-07-15'
	AND LOWER(I.ITEM_NAME) LIKE '%lamp%';

-- 18.3 ¿Cuántos pedidos incluían una "silla"?
SELECT
	COUNT(DISTINCT O.ORDER_ID) AS CHAIR_ORDERS
FROM
	ORDERS O
	JOIN ORDER_ITEMS OI ON O.ORDER_ID = OI.ORDER_ID
	JOIN ITEMS I ON OI.ITEM_ID = I.ITEM_ID
WHERE
	LOWER(I.ITEM_NAME) LIKE '%chair%';